#!/usr/bin/env bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/gonstoll/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/gonstoll/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
  printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
  mkdir ${DOTFILES_DIRECTORY}
  # Get the tarball
  curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
  # Extract to the dotfiles directory
  tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
  # Remove the tarball
  rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/list
source ./lib/misc
source ./lib/utils

# Test for known flags
for opt in $@
do
  case $opt in
    --no-packages) no_packages=true ;;
    --no-sync) no_sync=true ;;
    --no-custom-zshrc-path) no_custom_zshrc_path=true ;;
    -*|--*) e_warning "Warning: invalid option $opt" ;;
  esac
done

# Add custom .zshrc path
function custom_zshrc_path() {
  sudo tee -a /etc/zshenv >/dev/null <<'EOF'

if [[ -z "$XDG_CONFIG_HOME" ]]
then
	export XDG_CONFIG_HOME="$HOME/.config"
fi

if [[ -d "$XDG_CONFIG_HOME/zsh" ]]
then
	export ZDOTDIR="$XDG_CONFIG_HOME/zsh/"
fi
EOF
}

# Check for Homebrew and install if missing
if ! type_exists 'brew'; then
  e_header "Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $ZDOTDIR/.zprofile
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Check for git and install if missing
if ! type_exists 'git'; then
  e_header "Updating Homebrew before installing git..."
  brew update
  e_header "Installing Git..."
  brew install git
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
  e_header "Initializing git repository..."
  git init
  git remote add origin ${DOTFILES_GIT_REMOTE}
  git fetch origin master
  # Reset the index and working tree to the fetched HEAD
  # (submodules are cloned in the subsequent sync step)
  git reset --hard FETCH_HEAD
  # Remove any untracked files
  git clean -fd
fi

# Conditionally create a custom .zshrc path
if [[ $no_custom_zshrc_path ]]; then
  printf "Skipped creating a custom .zshrc path.\n"
else
  e_header "Creating custom .zshrc path..."
  custom_zshrc_path
  e_success "Custom .zshrc path added!"
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
  printf "Skipped dotfiles sync.\n"
else
  e_header "Syncing dotfiles git repository..."
  # Pull down the latest changes
  git pull --rebase origin master
  # Update submodules
  git submodule update --recursive --init --quiet
fi

# Conditionally install brew and runtime packages
if [[ $no_packages ]]; then
  printf "Skipped package installations.\n"
else
  printf "Installing/updating packages...\n"
  # Install Homebrew formulae
  BREWFILE_PATH="${DOTFILES_DIRECTORY}/Brewfile"
  echo "export HOMEBREW_BUNDLE_FILE=${BREWFILE_PATH}" >> $ZDOTDIR/.zshrc
  brew bundle --file=$BREWFILE_PATH

  # Install Node packages
  run_misc_packages
fi

function stow_dotfiles() {
  stow -v .
  e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting stowed dotfiles
seek_confirmation "Warning: This step may overwrite your existing stowed dotfiles."

if is_confirmed; then
  stow_dotfiles
  source $ZDOTDIR/.zshrc
else
  printf "Aborting...\n"
  exit 1
fi

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
  source $ZDOTDIR/.zshrc
  bash ./.config/bin/osxdefaults
  e_success "OS X settings updated! You may need to restart."
else
  printf "Skipped OS X settings update.\n"
fi
